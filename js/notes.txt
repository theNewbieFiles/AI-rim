for (let y = 0; y < subdivisions+1; y++) {
            for (let x = 0; x < subdivisions+1; x++) {
                let arrayPos = (x * 3) + y * (subdivisions + 2);


                let nnx = (plane.geometry.attributes.position.array[arrayPos] + center.x);
                let nny = (plane.geometry.attributes.position.array[arrayPos + 2] + center.z);

                let nx = x - (dimensions/2) + center.x;
                let ny = y - (dimensions/2) + center.z;


                let value = Manager.get(nx, ny);

                plane.geometry.attributes.position.array[arrayPos + 1] = value  * Settings.hh;
            }
        }





for (let y = 0; y < subdivisions; y++) {
     for (let x = 0; x < subdivisions; x++) {
         let arrayPos1 = (x * 3) + y * (subdivisions + 2);
         let arrayPos2 = ((x+1) * 3) + y * (subdivisions + 2);

         let arrayPos3 = (x * 3) + (y+1) * (subdivisions + 2);
         let arrayPos4 = ((x+1) * 3) + (y+1) * (subdivisions + 2);



         let x1 = (plane.geometry.attributes.position.array[arrayPos] + center.x);
         let y1 = (plane.geometry.attributes.position.array[arrayPos + 2] + center.z);


         plane.geometry.attributes.position.array[arrayPos + 1] = value  * Settings.hh;
     }
 }




 /*let loader2 = new THREE.TextureLoader();
      loader2.load(
          // resource URL
          "img/pueblo3.png",

          // onLoad callback
          function ( texture ) {
              //done loading



              let canvas = document.createElement( 'canvas' );
              canvas.width = texture.image.width;
              canvas.height = texture.image.height;
              let context = canvas.getContext( '2d' );
              context.drawImage(texture.image,0,0);




              for (let w = 0; w < 13; w++) {
                  for (let h = 0; h < 13; h++) {

                      let imgD = context.getImageData(0, 0, 1024, 1024);

                      let data = [];
                      for(let i = 0, j = 0; j < imgD.data.length; j += 4, i++){

                          data[i] = imgD.data[j];


                      }



                  }
              }

              canvas = null;
              context = null;
          },

          // onProgress callback currently not supported
          undefined,

          // onError callback
          function ( err ) {
              console.error(err);
          }
      );*/